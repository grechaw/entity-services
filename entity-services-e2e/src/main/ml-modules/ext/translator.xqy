xquery version "1.0-ml";
module namespace northwind-from-northwind 
    = "http://marklogic.com/test#Northwind-0.0.2-from-Northwind-0.0.1";

import module namespace es = "http://marklogic.com/entity-services" 
    at "/MarkLogic/entity-services/entity-services.xqy";

(: This module was generated by MarkLogic Entity Services.                          :)
(: Its purpose is to create instances of entity types                               :)
(: defined in                                                                       :)
(: Northwind, version 0.0.2                                                         :)
(: from documents that were persisted according to model                            :)
(: Northwind, version 0.0.1                                                         :)
(:                                                                                  :)
(: Modification History:                                                            :)
(: Generated at timestamp: 2016-09-08T15:43:38.941407-07:00                         :)
(:   Persisted by AUTHOR                                                            :)
(:   Date: DATE                                                                     :)


(:~
 : Creates a map:map instance representation of the target entity type
 : from a document that contains the source entity instance.
 : @param $source-node  A document or node that contains data conforming to the
 : source entity type
 : @return A map:map instance that holds the data for this entity type.
 :)
declare function northwind-from-northwind:convert-instance-Customer(
    $source-node as node()
) as map:map
{
 json:object()
(: The following line identifies the type of this instance.  Do not change it.      :)
 =>map:with('$type', 'Customer')
(: The following lines are generated from the 'Customer' entity type.               :)
 =>   map:with('CustomerID',             xs:string($source-node/Customer/@CustomerID))
 =>es:optional('CompanyName',            xs:string($source-node/Customer/CompanyName))
 =>es:optional('Country',                xs:string($source-node/Customer/Country))
 =>es:optional('ContactName',            xs:string($source-node/Customer/ContactName))
 =>es:optional('Phone',                  xs:string($source-node/Customer/Phone))

};
    
(:~
 : Creates a map:map instance representation of the target entity type
 : from a document that contains the source entity instance.
 : @param $source-node  A document or node that contains data conforming to the
 : source entity type
 : @return A map:map instance that holds the data for this entity type.
 :)
declare function northwind-from-northwind:convert-instance-Product(
    $source-node as node()
) as map:map
{
 json:object()
(: The following line identifies the type of this instance.  Do not change it.      :)
 =>map:with('$type', 'Product')
(: The following lines are generated from the 'Product' entity type.                :)
 =>es:optional('ProductName',            xs:string($source-node/Product/ProductName))
 =>es:optional('UnitPrice',              xs:double($source-node/Product/UnitPrice))
 =>es:optional('SupplierID',             xs:integer($source-node/Product/SupplierID))
 (: The following property was missing from the source type                          :)
=>es:optional('QuantityPerUnit',        xs:string( () ))
 =>   map:with('ProductID',              xs:integer($source-node/Product/@ProductID))

};
    
(:~
 : Creates a map:map instance representation of the target entity type
 : from a document that contains the source entity instance.
 : @param $source-node  A document or node that contains data conforming to the
 : source entity type
 : @return A map:map instance that holds the data for this entity type.
 :)
declare function northwind-from-northwind:convert-instance-Order(
    $source-node as node()
) as map:map
{
 json:object()
(: The following line identifies the type of this instance.  Do not change it.      :)
 =>map:with('$type', 'Order')
(: The following lines are generated from the 'Order' entity type.                  :)
 =>   map:with('OrderID',                xs:integer($source-node/Order/@OrderID))
 =>es:optional('CustomerID',             function($path) { json:object()=>map:with('$type', 'Customer')=>map:with('$ref', $path/Customer/text() ) }($source-node/Order/CustomerID))
 =>es:optional('OrderDate',              xs:date($source-node/Order/OrderDate))
 =>es:optional('ShipDate',               xs:date($source-node/Order/ShipDate))
 (: The following property was missing from the source type                          :)
=>es:optional('ShipName',               xs:string( () ))
 =>es:optional('ShipAddress',            xs:string($source-node/Order/ShipAddress))
 =>es:optional('OrderDetails',           northwind-from-northwind:extract-array($source-node/Order/OrderDetails, function($path) { json:object()=>map:with('$type', 'OrderDetail')=>map:with('$ref', $path/OrderDetail/text() ) }))

};
    
(:~
 : Creates a map:map instance representation of the target entity type
 : from a document that contains the source entity instance.
 : @param $source-node  A document or node that contains data conforming to the
 : source entity type
 : @return A map:map instance that holds the data for this entity type.
 :)
declare function northwind-from-northwind:convert-instance-OrderDetail(
    $source-node as node()
) as map:map
{
 json:object()
(: The following line identifies the type of this instance.  Do not change it.      :)
 =>map:with('$type', 'OrderDetail')
(: The following lines are generated from the 'OrderDetail' entity type.            :)
 =>es:optional('ProductID',              function($path) { json:object()=>map:with('$type', 'Product')=>map:with('$ref', $path/Product/text() ) }($source-node/OrderDetail/ProductID))
 =>es:optional('UnitPrice',              xs:integer($source-node/OrderDetail/UnitPrice))
 =>es:optional('Quantity',               xs:integer($source-node/OrderDetail/Quantity))

};
    

(:~
 : This function includes an array if there are items to put in it.
 : If there are no such items, then it returns an empty sequence.
 : TODO EA-4? move to es: module
 :)
declare function northwind-from-northwind:extract-array(
    $path-to-property as item()*,
    $fn as function(*)
) as json:array?
{
    if (empty($path-to-property))
    then ()
    else json:to-array($path-to-property ! $fn(.))
};


